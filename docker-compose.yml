
services:
  users-db:
    image: postgres:16
    container_name: users_postgres
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: usersdb
    ports:
      - "5435:5432"
    volumes:
      - postgres_users_data:/var/lib/postgresql/data

  users-migrate:
    image: migrate/migrate:v4.17.0
    depends_on:
      - users-db
    volumes:
      - ./users/migrations:/migrations
    entrypoint: [
      "migrate",
      "-path", "/migrations",
      "-database", "postgres://myuser:mypassword@users-db:5432/usersdb?sslmode=disable",
      "up"
    ]
    restart: "on-failure"

  users-service:
    build:
      context: .
      dockerfile: users/Dockerfile.dev
    container_name: users_service
    depends_on:
      - users-db
    environment:
      DB_HOST: users-db 
      DB_PORT: 5432
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: usersdb
      PORT: 8080
      JWT_PRIVATE_KEY: ${RSA_PRIVATE_KEY}
    volumes:
      - ./users:/app/users
      - /app/users/tmp
    restart: always

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile.dev
    container_name: api_gateway
    depends_on:
      - users-service
      - trips-service
    environment:
      JWT_PUBLIC_KEY: ${RSA_PUBLIC_KEY}
      TRUSTED_ORIGINS: "http://saarathi.com:3001,http://driver.saarathi.com:3001"
    ports:
      - "8080:8081"
    volumes:
      - ./api-gateway:/app/api-gateway
      - /app/api-gateway/tmp
    restart: always

  osrm-backend:
    image: ghcr.io/project-osrm/osrm-backend
    container_name: osrm_backend
    command: osrm-routed --algorithm mld /data/nepal-latest.osrm
    volumes:
      - ./osrm-data:/data
    restart: always

  web-app:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: nextjs_web_app
    depends_on:
      - api-gateway
    ports:
      - "3001:3000"
    volumes:
      - ./web:/app
      - web_node_modules:/app/node_modules
    restart: "on-failure"

  trips-db:
    image: postgres:16
    container_name: trips_postgres
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: tripsdb
    ports:
      - "5436:5432"
    volumes:
      - postgres_trips_data:/var/lib/postgresql/data

  trips-migrate:
    image: migrate/migrate:v4.17.0
    depends_on:
      - trips-db
    volumes:
      - ./trips/migrations:/migrations
    entrypoint: [
      "migrate",
      "-path", "/migrations",
      "-database", "postgres://myuser:mypassword@trips-db:5432/tripsdb?sslmode=disable",
      "up"
    ]
    restart: "on-failure"

  trips-service:
    build:
      context: .
      dockerfile: trips/Dockerfile.dev
    container_name: trips_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      trips-db:
        condition: service_started
    environment:
      DB_HOST:  trips-db
      DB_PORT: 5432
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: tripsdb
      PORT: 8080
      JWT_PRIVATE_KEY: ${RSA_PRIVATE_KEY}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AMQP_ADDRESS: "amqp://guest:guest@rabbitmq:5672/"
    volumes:
      - ./trips:/app/trips
      - /app/trips/tmp
    restart: always

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    command: ["redis-server", "--appendonly", "yes"]

  driver-state-service:
    build:
      context: .
      dockerfile: driver-state/Dockerfile.dev
    depends_on:
      - redis
      - api-gateway
      - rabbitmq
    deploy:
      mode: replicated
      replicas: 2
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AMQP_ADDRESS: "amqp://guest:guest@rabbitmq:5672/"
    volumes:
      - ./driver-state:/app/driver-state
      - /app/driver-state/tmp
    restart: always

  ride-matching-service:
    build:
      context: .
      dockerfile: ride-matching/Dockerfile.dev 
    depends_on:
      - rabbitmq
      - driver-state-service 
    deploy:
      mode: replicated
      replicas: 2
    environment:
      REDIS_HOST: redis
      REDIS_PORT: 6379
      AMQP_ADDRESS: "amqp://guest:guest@rabbitmq:5672/"

  rabbitmq:
    image: rabbitmq:4.1
    container_name: rabbitmq
    ports:
      - 5675:5672
      - 15675:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s 
      timeout: 10s 
      retries: 5

volumes:
  postgres_trips_data:
  postgres_users_data:
  web_node_modules:
  redis_data: 
  rabbitmq_data:

