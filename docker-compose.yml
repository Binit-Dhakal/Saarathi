
services:
  postgres:
    image: postgres:16
    container_name: users_postgres
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: usersdb
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  migrate:
    image: migrate/migrate:v4.17.0
    depends_on:
      - postgres
    volumes:
      - ./users/migrations:/migrations
    entrypoint: [
      "migrate",
      "-path", "/migrations",
      "-database", "postgres://myuser:mypassword@postgres:5432/usersdb?sslmode=disable",
      "up"
    ]
    restart: "on-failure"

  users-service:
    build:
      context: .
      dockerfile: users/Dockerfile.dev
    container_name: users_service
    depends_on:
      - postgres
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: myuser
      DB_PASSWORD: mypassword
      DB_NAME: usersdb
      PORT: 8080
      JWT_PRIVATE_KEY: ${RSA_PRIVATE_KEY}
    volumes:
      - ./users:/app/users
      - /app/users/tmp
    restart: always

  api-gateway:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile.dev
    container_name: api_gateway
    depends_on:
      - users-service
    environment:
      JWT_PUBLIC_KEY: ${RSA_PUBLIC_KEY}
      TRUSTED_ORIGINS: "http://saarathi.com:3001,http://driver.saarathi.com:3001"
    ports:
      - "8080:8081"
    volumes:
      - ./api-gateway:/app/api-gateway
      - /app/api-gateway/tmp
    restart: always

  web-app:
    build:
      context: ./web
      dockerfile: Dockerfile.dev
    container_name: nextjs_web_app
    # Assumes your Next.js app will call the API Gateway
    depends_on:
      - api-gateway
    ports:
      - "3001:3000"
    volumes:
      - ./web:/app
      - node_modules_data:/app/node_modules
    restart: "on-failure"
volumes:
  postgres_data:
  node_modules_data:

